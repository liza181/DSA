#LINEAR SEARCH

For the elements in an array in a linear way, if your array length is shorter use linear search.
Time complexity :- O(n)
[5,8,11,14,16] , target = 14. Find the index
for(o to n-1){
  if(arr[i] == target){
    return i;
    }
    return -1;
}

# BINARY SEARCH
To reduce time complexity, while searching we have to use binary search.
To perform binary search, the array should be sorted.

Time Complexity - O(logn)
Step 1: Initialize l pointer at 0 and r pointer at n -1.
Step 2: Run the loop from l to r.
Step 3: Break the loop when l and r crosses each other.
Step 4: Find the middle value; M = (l+r)/2
Step 5: Compare middle element to the target.

 while(l<r){
            if(arr[mid] == target){
                return mid;
            }
            if(arr[mid] < target){
                l = m+1;
            }
            else{
                r = m+1;
            }
        }
